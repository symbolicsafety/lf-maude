
*** In this version, each physical action specifies a possible value 
*** to be generated (either a boolean value or a rational number in 
*** an interval). The envFire operation, declared at the kind level, 
*** generates a single physical action and a symbolic value.

omod CLOCK is
  protecting TIME-INF .

  class Clock | clock : TimeInf .

  var O : Oid .
  var TI : TimeInf .
  var T : Time .
  var CONF : Configuration .

  --- increase clocks 
  op increaseClock : Configuration Time ~> Configuration .
  eq increaseClock(none, T) = none .
  eq increaseClock(< O : Clock | clock : TI > CONF, T)
   = < O : Clock | clock : TI plus T >  increaseClock(CONF, T) .
endom


omod PHYSICAL-ACTIONS is
  protecting ENVIRONMENTS .
  protecting LF-EXPR .
  protecting CLOCK .
  including LF-SMT-INTERFACE .

  --- Dynamically, each physical action has:
  ---    * home address
  ---    * description of a possible value
  ---    * minimum separation time
  ---    * a clock to measure a separation time
  ---    * a counter to generate a new variable

  class PhysAct | possibleValues : PossibleValue,
                  minSep : Time,
                  counter : Nat .
  subclass PhysAct < Clock .

  --- a possible value to be generated is either a boolean value or 
  --- a rational value in an interval
  sort PossibleValue .
  op bool : -> PossibleValue [ctor] .
  op rat : RatValue RatValue -> PossibleValue [ctor] .

  subsort PhysActId < Oid .

  op pv : PhysActId Nat -> SMTVarId .  --- SMT variable ids

  var O : Oid .
  var AI : ActionId .
  var RI : ReactorId .
  var PV : PossibleValue .
  var VAL : Value .
  vars RV RV' RV'' : RatValue .
  var CONST : BoolValue .
  var PENV : Object .
  var CONF : Configuration .
  var T : Time .
  var TI : TimeInf .
  var N : Nat .

  --- An operation to "fire" a single physical action. This will be
  --- triggered by another rule
  op envFire : Object ~> Object .

  --- fire ONE of its physical actions
  rl [envFire] : 
     envFire(< O : Environment | physicalActions : PENV CONF >)
     =>
     < O : Environment | physicalActions : envFire(PENV) CONF > .

  --- generate a symbolic value (a fresh variable with const)
  ceq envFire(
      < (RI . AI) : PhysAct | possibleValues : PV, 
                              minSep : T,
                              clock : TI,
                              counter : N >)
    = < (RI . AI) : PhysAct | clock : zero,
                              counter : s N > 
      scheduleAction(event(RI, AI, VAL, CONST && [TI ge T]))
   if {VAL,CONST} := genSymVal(PV, (RI . AI), N) .

   ---TODO: currently, TI ge T may generate redundant const..

  sort ValueWithConst .
  op {_,_} : Value BoolValue -> ValueWithConst [ctor] .

  op genSymVal : PossibleValue PhysActId Nat -> ValueWithConst .
  eq genSymVal(bool, (RI . AI), N) 
   = {[b(pv(RI . AI, N))], trueVal} .
  ceq genSymVal(rat(RV, RV'), (RI . AI), N)
    = {RV'', (RV <= RV'') && (RV'' <= RV')}
   if RV'' := [r(pv(RI . AI, N))] .
endom

