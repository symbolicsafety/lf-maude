*** This is a model of the third train door example given on Figure 7 in
*** the Verification of Cyberphysical Systems paper.

in lf-representation

omod TRAINDOOR-V3 is 
 including LF-REPR .
 
 ops isOpen locked : -> BVarId [ctor] .
 ops controller train door : -> ReactorId [ctor] .
 ops close lock unlock open : -> BPortId [ctor] .
 ops startup external extOpen : -> BActionId .
 ops counter1 counter2 counter3 : -> IVarId [ctor] .
 op init : -> Configuration .
 
 eq init = 
    < controller : Reactor | 
      inports : none,
      outports : < lock : Port | value : [false] > 
                 < open : Port | value : [false] >
		 < unlock : Port | value : [false] > 
                 < close : Port | value : [false] >, 
      state : counter3 |-> [0],
      timers : none,
      actions : < startup : LogicalAction | minDelay : 0, 
                               minSpacing : 0, 
                               policy : defer, 
                               payload : [false] >
                < external : PhysicalAction | 
                               minDelay : 0, 
                               minSpacing : 0, 
                               policy : defer, 
                               payload : [false] >,
      reactions : 
        (reaction when startup do { skip })
        reaction when external --> close ; lock ; open ; unlock do
	{ if external then (close <- [true] ) ; (lock <- [true])
	  else (open <- [true]) ; (unlock <- [true]) fi
	   ;  (counter3 := counter3 + [1])}    --- for testing
    >
--- the startup stuff does not really do anything ...

    
    < door : Reactor | 
        inports : < lock : Port | value : [false] >
	          < unlock : Port | value : [false] >
		  < open : Port | value : [false] >
	          < close : Port | value : [false] >,
        outports : none,
        state : (locked |-> [false])  ; (isOpen |-> [false]) ; (counter2 |-> [0]) ;
	        (counter1 |-> [0]),
        timers : none,
        actions : < extOpen : PhysicalAction | 
                               minDelay : 0, 
                               minSpacing : 0, 
                               policy : defer, 
                               payload : [false] >,
        reactions : (reaction when close do { (counter2 := counter2 + [1]) ;
	                                      isOpen := [true] })
                    (reaction when lock do
		       { if isOpen === [false] then (counter2 := counter2 + [1]) ;
	                                      locked := [true] fi })
                    (reaction when unlock do { (counter2 := counter2 + [1]) ;
	                                      locked := [false] }) 
                    (reaction when open do
		       { if locked === [false] then (counter2 := counter2 + [1]) ;
	                                      isOpen := [true] fi }) 
                    (reaction when extOpen do
		       {  (counter1 := counter1 + [1]) ;
		          if locked === [false] then (counter2 := counter2 + [1]) ;
	                                      isOpen := [true] fi }) 

   >

    (controller : lock -- 5 --> door : lock)
    (controller : unlock -- 4 --> door : unlock)
    (controller : open -- 7 --> door : open)
    (controller : close -- 3 --> door : close) .
   
endom
